name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
jobs:
  call-workflow-check:
    uses: ./.github/workflows/check.yml

  publish:
    name: Publish releases
    needs: call-workflow-check
    concurrency: ci-releasing-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Determine release info
        id: info
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          VERSION=${GITHUB_REF##*/}
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=outputdir::findora-exporter-${VERSION}-x86_64-unknown-linux-musl"
          echo "::set-output name=innerdir::findora-exporter-${VERSION}"
      - name: Install dependencies
        run: |
          sudo apt -y update
          sudo apt install -y musl musl-dev musl-tools
      - name: Setting rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true
          profile: minimal

      - name: Using cache to speed up
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-stable-cargo-${{ hashFiles('**/Cargo.lock') }}

      # I used a tricky way to do the building,
      # since cargo deb will building out 
      # 1. deb 
      # 2. musl binary
      # so I simply use that tool's output as releasing binaries
      - name: Building binaries
        run: |
          cargo install cargo-deb
          cargo deb --target x86_64-unknown-linux-musl -q 
      - name: Show information
        run: | 
          echo "deb size"
          ls -lah target/x86_64-unknown-linux-musl/debian/*.deb
          echo "musl binary size"
          ls -lah target/x86_64-unknown-linux-musl/release/findora-exporter
          echo "version: ${{ steps.info.outputs.version }}"
      - name: Packaging binaries
        run: |
          chmod +x target/x86_64-unknown-linux-musl/debian/findora-exporter_${{ steps.info.outputs.version }}_amd64.deb
          mv target/x86_64-unknown-linux-musl/debian/findora-exporter_${{ steps.info.outputs.version }}_amd64.deb ./findora-exporter_${{ steps.info.outputs.version }}_amd64.deb
          chmod +x target/x86_64-unknown-linux-musl/release/findora-exporter
          mkdir -p ${{ steps.info.outputs.outputdir }}/${{ steps.info.outputs.innerdir }}
          cp LICENSE ${{ steps.info.outputs.outputdir }}/${{ steps.info.outputs.innerdir }}/LICENSE 
          cp README.md ${{ steps.info.outputs.outputdir }}/${{ steps.info.outputs.innerdir }}/README.md 
          cp target/x86_64-unknown-linux-musl/release/findora-exporter ${{ steps.info.outputs.outputdir }}/${{ steps.info.outputs.innerdir }}/findora-exporter
          tar -zcvf ${{ steps.info.outputs.outputdir }}.tar.gz ${{ steps.info.outputs.outputdir }}
      - name: Create draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.info.outputs.version }}
          draft: true

      - name: Uploading musl binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.info.outputs.outputdir }}.tar.gz
          asset_name: ${{ steps.info.outputs.outputdir }}.tar.gz
          asset_content_type: application/gzip

      - name: Uploading deb package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./findora-exporter_${{ steps.info.outputs.version }}_amd64.deb
          asset_name: findora-exporter_${{ steps.info.outputs.version }}_amd64.deb
          asset_content_type: application/x-deb
  
  publish-image:
    name: Publish image releases
    needs: call-workflow-check
    concurrency: ci-releasing-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/FindoraNetwork/findora-exporter
          tags: |
            type=raw,value={{tag}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
